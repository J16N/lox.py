program       := declaration* EOF ;
block         := "{" declaration* "}" ;
declaration   := classDecl 
               | funDecl
               | multiVarDecl 
               | statement ;
classDecl     := "class" IDENTIFIER "{" funcExpr* "}" ;
funcDecl      := "fn" funcExpr ;
funcExpr	  := IDENTIFIER "(" parameters? ")" block ;
parameters    := IDENTIFIER ( "," IDENTIFIER )* ;
multiVarDecl  := "var" varDecl ( "," varDecl )* ";" ;
varDecl	 	  := IDENTIFIER ( "=" assignment )? ;
statement     := exprStmt 
               | forStmt 
               | ifStmt  
               | returnStmt 
               | whileStmt 
               | block 
               | break 
               | continue 
               | ";" ;
exprStmt      := expression ";" ;
forStmt       := "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;
ifStmt        := "if" "(" expression ")" statement ( "else" statement )? ;
returnStmt    := "return" expression? ";" ;
whileStmt     := "while" "(" expression ")" statement ;
break	   	  := "break" ";" ;
expression    := comma ( "," comma )* ;
comma         := assignment ;
assignment    := (call ".")? IDENTIFIER "=" assignment 
               | ternary ;
ternary       := logical_or "?" assignment ":" assignment
               | logical_or ;
logic_or      := logic_and ( "or" logic_and )* ;
logic_and     := equality ( "and" equality )* ;
equality      := comparison ( ( "!=" | "==" ) comparison )* ;
comparison    := bit_or ( ( ">" | ">=" | "<" | "<=" ) bit_or )* ;
bit_or        := bit_xor ( "|" bit_xor )* ;
bit_xor       := bit_and ( "^" bit_and )* ;
bit_and       := bit_shift ( "&" bit_shift )* ;
bit_shift     := term ( ( "<<" | ">>" ) term )* ;
term          := factor ( ( "-" | "+" ) factor )* ;
factor        := unary ( ( "/" | "*" | "%" ) unary )* ;
unary         := ( "!" | "-" | "-- | "+" | "++" | "~" ) unary
               | exponent ;
exponent      := call ( "**" call )* ;
call		  := primary ( "(" arguments? ")" | "." IDENTIFIER )* ( "++" | "--" )? ;
arguments     := assignment ( "," assignment )* ;
primary       := "true" | "false" | "nil" | "this"
               | NUMBER | STRING | 
               | "(" expression ")" 
               | IDENTIFIER ;